Grammar:

Rule 0     S' -> prog
Rule 1     prog -> listeInstructions
Rule 2     listeInstructions -> instruction listeInstructions
Rule 3     listeInstructions -> instruction
Rule 4     instruction -> ecrire
Rule 5     ecrire -> ECRIRE ( expr ) ;
Rule 6     expr -> ENTIER
Rule 7     expr -> ( expr )
Rule 8     expr -> expr * expr
Rule 9     expr -> expr + expr

Unused terminals:

    INFERIEUR_OU_EGAL
    IDENTIFIANT

Terminals, with rules where they appear:

(                    : 5 7
)                    : 5 7
*                    : 8
+                    : 9
;                    : 5
ECRIRE               : 5
ENTIER               : 6
IDENTIFIANT          : 
INFERIEUR_OU_EGAL    : 
error                : 

Nonterminals, with rules where they appear:

ecrire               : 4
expr                 : 5 7 8 8 9 9
instruction          : 2 3
listeInstructions    : 1 2
prog                 : 0


state 0

    (0) S' -> . prog
    (1) prog -> . listeInstructions
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    ECRIRE          shift and go to state 5

    prog                           shift and go to state 1
    listeInstructions              shift and go to state 2
    instruction                    shift and go to state 3
    ecrire                         shift and go to state 4

state 1

    (0) S' -> prog .


state 2

    (1) prog -> listeInstructions .
    $end            reduce using rule 1 (prog -> listeInstructions .)


state 3

    (2) listeInstructions -> instruction . listeInstructions
    (3) listeInstructions -> instruction .
    (2) listeInstructions -> . instruction listeInstructions
    (3) listeInstructions -> . instruction
    (4) instruction -> . ecrire
    (5) ecrire -> . ECRIRE ( expr ) ;
    $end            reduce using rule 3 (listeInstructions -> instruction .)
    ECRIRE          shift and go to state 5

    instruction                    shift and go to state 3
    listeInstructions              shift and go to state 6
    ecrire                         shift and go to state 4

state 4

    (4) instruction -> ecrire .
    ECRIRE          reduce using rule 4 (instruction -> ecrire .)
    $end            reduce using rule 4 (instruction -> ecrire .)


state 5

    (5) ecrire -> ECRIRE . ( expr ) ;
    (               shift and go to state 7


state 6

    (2) listeInstructions -> instruction listeInstructions .
    $end            reduce using rule 2 (listeInstructions -> instruction listeInstructions .)


state 7

    (5) ecrire -> ECRIRE ( . expr ) ;
    (6) expr -> . ENTIER
    (7) expr -> . ( expr )
    (8) expr -> . expr * expr
    (9) expr -> . expr + expr
    ENTIER          shift and go to state 10
    (               shift and go to state 8

    expr                           shift and go to state 9

state 8

    (7) expr -> ( . expr )
    (6) expr -> . ENTIER
    (7) expr -> . ( expr )
    (8) expr -> . expr * expr
    (9) expr -> . expr + expr
    ENTIER          shift and go to state 10
    (               shift and go to state 8

    expr                           shift and go to state 11

state 9

    (5) ecrire -> ECRIRE ( expr . ) ;
    (8) expr -> expr . * expr
    (9) expr -> expr . + expr
    )               shift and go to state 12
    *               shift and go to state 13
    +               shift and go to state 14


state 10

    (6) expr -> ENTIER .
    )               reduce using rule 6 (expr -> ENTIER .)
    *               reduce using rule 6 (expr -> ENTIER .)
    +               reduce using rule 6 (expr -> ENTIER .)


state 11

    (7) expr -> ( expr . )
    (8) expr -> expr . * expr
    (9) expr -> expr . + expr
    )               shift and go to state 15
    *               shift and go to state 13
    +               shift and go to state 14


state 12

    (5) ecrire -> ECRIRE ( expr ) . ;
    ;               shift and go to state 16


state 13

    (8) expr -> expr * . expr
    (6) expr -> . ENTIER
    (7) expr -> . ( expr )
    (8) expr -> . expr * expr
    (9) expr -> . expr + expr
    ENTIER          shift and go to state 10
    (               shift and go to state 8

    expr                           shift and go to state 17

state 14

    (9) expr -> expr + . expr
    (6) expr -> . ENTIER
    (7) expr -> . ( expr )
    (8) expr -> . expr * expr
    (9) expr -> . expr + expr
    ENTIER          shift and go to state 10
    (               shift and go to state 8

    expr                           shift and go to state 18

state 15

    (7) expr -> ( expr ) .
    )               reduce using rule 7 (expr -> ( expr ) .)
    *               reduce using rule 7 (expr -> ( expr ) .)
    +               reduce using rule 7 (expr -> ( expr ) .)


state 16

    (5) ecrire -> ECRIRE ( expr ) ; .
    ECRIRE          reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)
    $end            reduce using rule 5 (ecrire -> ECRIRE ( expr ) ; .)


state 17

    (8) expr -> expr * expr .
    (8) expr -> expr . * expr
    (9) expr -> expr . + expr
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 8 (expr -> expr * expr .)
    *               shift and go to state 13
    +               shift and go to state 14


state 18

    (9) expr -> expr + expr .
    (8) expr -> expr . * expr
    (9) expr -> expr . + expr
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for + resolved as shift
    )               reduce using rule 9 (expr -> expr + expr .)
    *               shift and go to state 13
    +               shift and go to state 14


Conflicts:

shift/reduce conflict for * in state 17 resolved as shift
shift/reduce conflict for + in state 17 resolved as shift
shift/reduce conflict for * in state 18 resolved as shift
shift/reduce conflict for + in state 18 resolved as shift